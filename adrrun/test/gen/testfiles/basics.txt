$START("1+1")
int main() {
    return 1 + 1;
}
$VERIFY(2)

$START("hellostr")
string main() {
    int a = 1;
    if( a <= 2 ) {
        return "hello123";
    }
    return "%HELLO";
}
$VERIFY("hello123")

$START("and-or")
bool main() {
    int a = 1;
    return (a >= 6) and (6 <= a) or true;
}
$VERIFY("false")

$START("funcall")
int add(int a, int b) {
    return a + b;
}
int main() {
    int g = 3;
    return add(g, 4);
}
$VERIFY("7")

$START("foreach")
int valfn(int v) {
    return v;
}
int loop(int a) {
    array<int> array = [valfn(0), 1, 10]; 
    for(int i in array) {
        a = a + i;
    }
    return a;
}
int main() {
    int a = 0;
    return loop(a);
}
$VERIFY("11")

$START("ifelse")
int loop() {
    int a = 0;
    for(int i in [1, 2, 3, 4]) {
        if( i >= 4 ) {
            return i + a;
        } else if ( i == 1 ) {
            a = a + 2;
        } else if ( i == 2 ) {
            a = a - 1;
        } else {
            a = a - 1;
        }
    }
    return 0;
}
int main() {
    return loop();
}
$VERIFY("4")

$START("negate")
float main() {
    float a = 100.4;
    return -a;
}
$VERIFY("-100.4")

$START("divide")
int main() {
    int a = 1;
    return a / 2;
}
$VERIFY("0.5")

$START("modulus")
int main() {
    int a = 1;
    return a % 2;
}
$VERIFY("1")

$START("not")
bool main() {
    int a = 1;
    return not (a == 2);
}
$VERIFY("true")

$START("native-import")
import void print(string arg);
void main() {
    print("hello");
    return;
}
$VERIFY("<none>")

$START("operator-preceedence")
bool main() {
    if( (2 * 3 + 1) != 7 ) {
        return false;
    }
    if( (2 / 2 - 1) != 0 ) {
        return false;
    }
    if( (-2 * -2 - 1) != 3 ) {
        return false;
    }
    return true;
}
$VERIFY("true")

$START("double-negative-parens")
int main() {
    return 100 - -100 - 200;
}
$VERIFY("0")

$START("implicit return")
import void print(string arg);
void test() {
    print("T");
}
int main() {
    test();
    test();
    test();
    return 0;
}
$VERIFY("0")

$START("export-func-test")
export int test_int_1_int(int v) {
    return v + 1;
}
int main() {
    return 10000;
}
$VERIFY(10000)

$START("return-array")
array<int> A() {
    return [1,2,3,4,5,6,7,8];
}
int main() {
    array<int> a = A();
    for(int v in a) {
        return v;
    }
}
$VERIFY("1")
